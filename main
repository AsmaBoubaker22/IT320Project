package com.mycompany.oop;


import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.*;
import java.util.*;
import java.util.ArrayList;
import java.util.List;
import java.lang.reflect.Field;

public class OOP {

    public static void main(String[] args) {
        
        CSVIngestion csvIngestion = new CSVIngestion();
        
        String filePath = "SampleDataCSV.csv"; 
        
        List<List<String>> data = csvIngestion.csvImport(filePath);
        
        PropertyDataCleaner cleaner = new PropertyDataCleaner();
        
        cleaner.removeMissingValues(data);
        cleaner.removeDuplicates(data);
        cleaner.removeOutliers(data);
        cleaner.fixYear(data);
        
        // Now, inject the data into the respective objects CSV--------------------------------------------------------------
        csvIngestion.csvInject(data);
      
     /*   System.out.println("Buyers List: " + csvIngestion.buyersList);
        System.out.println("Agents List: " + csvIngestion.agentsList);
        System.out.println("Houses List: " + csvIngestion.housesList);
        System.out.println("Locations List: " + csvIngestion.locationList);
        System.out.println("Units List: " + csvIngestion.unitsList);
        System.out.println("Townhouses List: " + csvIngestion.townhousesList);
        System.out.println("Development Sites List: " + csvIngestion.developmentSitesList);
        System.out.println("Transactions List: " + csvIngestion.transactionsList);*/
        
        
        XLSIngestion xlsIngestion = new XLSIngestion();
        String filePath2 = "SampleDataXLSX.xlsx"; 
        List<List<String>> data2 = xlsIngestion.xlsImport(filePath2);
        
        cleaner.removeMissingValues(data2);
        cleaner.removeDuplicates(data2);
        cleaner.removeOutliers(data2);
        cleaner.fixYear(data2);
        
        // Now, inject the data into the respective objects--------------------------------------------------------------
        xlsIngestion.xlsInject(data2);
       /* System.out.println("Buyers List: " + xlsIngestion.buyersList);
        System.out.println("Agents List: " + xlsIngestion.agentsList);
        System.out.println("Houses List: " + xlsIngestion.housesList);
        System.out.println("Locations List: " + xlsIngestion.locationList);
        System.out.println("Units List: " + xlsIngestion.unitsList);
        System.out.println("Townhouses List: " + xlsIngestion.townhousesList);
        System.out.println("Development Sites List: " + xlsIngestion.developmentSitesList);
        System.out.println("Transactions List: " + xlsIngestion.transactionsList);*/
        
        // Combine the lists from both CSV and XLS into a unified list for each type---------------------------
      /*  List<Buyer> buyersList = new ArrayList<>();
        buyersList.addAll(csvIngestion.buyersList);
        buyersList.addAll(xlsIngestion.buyersList);

        List<Agent> agentsList = new ArrayList<>();
        agentsList.addAll(csvIngestion.agentsList);
        agentsList.addAll(xlsIngestion.agentsList);

        List<House> housesList = new ArrayList<>();
        housesList.addAll(csvIngestion.housesList);
        housesList.addAll(xlsIngestion.housesList);

        List<Location> locationList = new ArrayList<>();
        locationList.addAll(csvIngestion.locationList);
        locationList.addAll(xlsIngestion.locationList);

        List<Unit> unitsList = new ArrayList<>();
        unitsList.addAll(csvIngestion.unitsList);
        unitsList.addAll(xlsIngestion.unitsList);

        List<Townhouse> townhousesList = new ArrayList<>();
        townhousesList.addAll(csvIngestion.townhousesList);
        townhousesList.addAll(xlsIngestion.townhousesList);

        List<DevelopmentSite> developmentSitesList = new ArrayList<>();
        developmentSitesList.addAll(csvIngestion.developmentSitesList);
        developmentSitesList.addAll(xlsIngestion.developmentSitesList);

        List<Transaction> transactionsList = new ArrayList<>();
        transactionsList.addAll(csvIngestion.transactionsList);
        transactionsList.addAll(xlsIngestion.transactionsList);*/
        
        /*
        CSVExporter.saveToTXTFile("C:\\Users\\Asma\\Desktop\\units.csv", unitsList);
        CSVExporter.saveToTXTFile("C:\\Users\\Asma\\Desktop\\agents.csv", agentsList);
        CSVExporter.saveToTXTFile("C:\\Users\\Asma\\Desktop\\buyers.csv", buyersList);
        CSVExporter.saveToTXTFile("C:\\Users\\Asma\\Desktop\\transactions.csv", transactionsList);
        CSVExporter.saveToTXTFile("C:\\Users\\Asma\\Desktop\\houses.csv", housesList);
        CSVExporter.saveToTXTFile("C:\\Users\\Asma\\Desktop\\dev.csv", developmentSitesList);
        CSVExporter.saveToTXTFile("C:\\Users\\Asma\\Desktop\\townhouses.csv", townhousesList);
        CSVExporter.saveToTXTFile("C:\\Users\\Asma\\Desktop\\locations.csv", locationList);
*/
        
        // EXPORT TO DATABASE ---------------------------------------------------------------------------------
      /*  ExportData exporter = new ExportData("jdbc:mysql://localhost:3306/java_db", "root", "123456");
        exporter.exportData(buyersList, agentsList, housesList, unitsList, townhousesList, developmentSitesList, transactionsList);*/
        
       Scanner scanner = new Scanner(System.in);

        System.out.println("Select the type of chart you want to generate:");
        System.out.println("1 - Bar Chart\n2 - Scatter Plot\n3 - Line Chart\n4 - Pie Chart");
        System.out.print("Enter your choice: ");

        int choice = scanner.nextInt();
        scanner.nextLine();

        if (choice == 1) {  // Bar Chart option

            // List of tables to choose from
            List<String> tables = Arrays.asList("Houses", "Units", "Townhouses", "DevelopmentSite", "Transactions");

            System.out.println("Please choose a table:");
            for (int i = 0; i < tables.size(); i++) {
                System.out.println((i + 1) + " - " + tables.get(i));
            }
            System.out.print("Enter the number corresponding to your choice: ");
            int tableChoice = scanner.nextInt();
            scanner.nextLine();

            if (tableChoice < 1 || tableChoice > tables.size()) {
                System.out.println("Invalid choice. Exiting.");
                return;
            }

            String selectedTable = tables.get(tableChoice - 1);

            // Get the qualitative columns for the selected table (X-axis options)
            List<String> qualitativeColumns = getQualitativeColumnsForTable(selectedTable);
            System.out.println("Please choose the variable for the X axis (Qualitative):");
            for (int i = 0; i < qualitativeColumns.size(); i++) {
                System.out.println((i + 1) + " - " + qualitativeColumns.get(i));
            }
            System.out.print("Enter the number corresponding to your choice: ");
            int xChoice = scanner.nextInt();
            scanner.nextLine();

            if (xChoice < 1 || xChoice > qualitativeColumns.size()) {
                System.out.println("Invalid choice. Exiting.");
                return;
            }

            String xAxis = qualitativeColumns.get(xChoice - 1);

            // Get the quantitative columns for the selected table (Y-axis options)
            List<String> quantitativeColumns = getQuantitativeColumnsForTable(selectedTable);
            System.out.println("Please choose the variable for the Y axis (Quantitative):");
            for (int i = 0; i < quantitativeColumns.size(); i++) {
                System.out.println((i + 1) + " - " + quantitativeColumns.get(i));
            }
            System.out.print("Enter the number corresponding to your choice: ");
            int yChoice = scanner.nextInt();
            scanner.nextLine();

            if (yChoice < 1 || yChoice > quantitativeColumns.size()) {
                System.out.println("Invalid choice. Exiting.");
                return;
            }

            String yAxis = quantitativeColumns.get(yChoice - 1);

            // Call the generateBarChart method with selected options
            System.out.println("Bar Chart setup complete.");
            System.out.println("X Axis: " + xAxis + " from " + selectedTable);
            System.out.println("Y Axis: " + yAxis + " from " + selectedTable);

            // Now generate the bar chart based on the user's selection
            DataVisualization.generateBarChart(selectedTable, xAxis, yAxis);

        } else {
            System.out.println("This feature is not implemented yet. Please select option 1 for now.");
        }

        scanner.close();
    }

    public static List<String> getQualitativeColumnsForTable(String table) {
        List<String> columns = new ArrayList<>();
        switch (table) {
            case "Houses":
                columns.add("RegionName");
                columns.add("CouncilArea");
                columns.add("HasGarden");
                columns.add("HasSwimmingPool");
                columns.add("HasFence");
                columns.add("Postcode");
                break;
            case "Units":
                columns.add("RegionName");
                columns.add("CouncilArea");
                columns.add("HasBalcony");
                columns.add("HasElevator");
                columns.add("Postcode");
                break;
            case "Townhouses":
                columns.add("RegionName");
                columns.add("CouncilArea");
                columns.add("Postcode");
                break;
            case "DevelopmentSite":
                columns.add("RegionName");
                columns.add("CouncilArea");
                columns.add("UnderConstruction");
                columns.add("Postcode");
                break;
            case "Transactions":
                columns.add("Method");
                break;
        }
        return columns;
    }

    public static List<String> getQuantitativeColumnsForTable(String table) {
        List<String> columns = new ArrayList<>();
        switch (table) {
            case "Houses":
            case "Units":
                columns.add("Rooms");
                columns.add("Bathrooms");
                columns.add("Landsize");
                columns.add("ParkingSpot");
                columns.add("BuildingSize");
                break;
            case "Townhouses":
                columns.add("Rooms");
                columns.add("Bathrooms");
                columns.add("Landsize");
                columns.add("ParkingSpot");
                columns.add("BuildingSize");
                columns.add("NumberOfSharedWalls");
                columns.add("NumberOfLevels");
                break;
            case "DevelopmentSite":
                columns.add("Landsize");
                break;
            case "Transactions":
                columns.add("Price");
                break;
        }
        return columns;
    }

      
      
      
      
   }
