clusteringButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                SwingUtilities.invokeLater(() -> {
                    JFrame clusterFrame = new JFrame("K-Means Clustering");
                    clusterFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    clusterFrame.setSize(500, 400);
                    clusterFrame.setLayout(new BorderLayout());

                    JLabel clusterTitle = new JLabel("K-Means Clustering Tool", SwingConstants.CENTER);
                    clusterTitle.setFont(new Font("Arial", Font.BOLD, 16));
                    clusterFrame.add(clusterTitle, BorderLayout.NORTH);

                    // Main Panel with GridLayout for inputs
                    JPanel inputPanel = new JPanel(new GridLayout(8, 1, 5, 5)); // 8 rows, 1 column, 5px gap
                    inputPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // Padding around the panel

                    // Select Column 1
                    JLabel column1Label = new JLabel("Select Column 1:");
                    String[] columns = {
                        "Rooms", "Bathroom", "parkingSpot", "Landsize", "BuildingArea",
                        "YearBuilt", "Distance", "Price", "Lattitude", "Longtitude"
                    };
                    JComboBox<String> column1Dropdown = new JComboBox<>(columns);

                    // Select Column 2
                    JLabel column2Label = new JLabel("Select Column 2:");
                    JComboBox<String> column2Dropdown = new JComboBox<>(columns);

                    // Number of Clusters
                    JLabel kLabel = new JLabel("Enter number of clusters (K):");
                    JTextField kField = new JTextField();

                    // Maximum Iterations
                    JLabel iterationsLabel = new JLabel("Enter maximum iterations:");
                    JTextField iterationsField = new JTextField("100"); // Default to 100 iterations

                    // Add components to the input panel
                    inputPanel.add(column1Label);
                    inputPanel.add(column1Dropdown);
                    inputPanel.add(column2Label);
                    inputPanel.add(column2Dropdown);
                    inputPanel.add(kLabel);
                    inputPanel.add(kField);
                    inputPanel.add(iterationsLabel);
                    inputPanel.add(iterationsField);

                    // Add input panel to the frame
                    clusterFrame.add(inputPanel, BorderLayout.CENTER);

                    // Run and Exit Buttons
                    JButton runClusteringButton = new JButton("Run Clustering");
                    JButton exitButton = new JButton("Exit");
                    JPanel buttonPanel = new JPanel();
                    buttonPanel.add(runClusteringButton);
                    buttonPanel.add(exitButton);

                    clusterFrame.add(buttonPanel, BorderLayout.SOUTH);

                    // Results area
                    JTextArea resultArea = new JTextArea(10, 30);
                    resultArea.setEditable(false);
                    JScrollPane scrollPane = new JScrollPane(resultArea);
                    clusterFrame.add(scrollPane, BorderLayout.EAST);

                    // Run Clustering Button Action
                    runClusteringButton.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            try {
                                int k = Integer.parseInt(kField.getText());
                                int maxIterations = Integer.parseInt(iterationsField.getText());

                                // Get selected columns
                                String col1Name = column1Dropdown.getSelectedItem().toString();
                                String col2Name = column2Dropdown.getSelectedItem().toString();

                                // Fetch selected data
                                List<Object> col1Data = DataExploration.fetchColumn("houses", col1Name);
                                List<Object> col2Data = DataExploration.fetchColumn("houses", col2Name);

                                // Validate and prepare dataset
                                List<double[]> dataset = Classification.getDataset(col1Data, col2Data);

                                // Run k-means clustering
                                kmeans kMeans = new kmeans(k, maxIterations);
                                kMeans.fit(dataset);

                                // Display results
                                StringBuilder result = new StringBuilder();
                                result.append("Clustering Complete!\n\n");
                                result.append("Centroids:\n");
                                for (int i = 0; i < k; i++) {
                                    result.append("Cluster ").append(i + 1).append(": ");
                                    result.append(Arrays.toString(kMeans.getCentroids().get(i))).append("\n");
                                }
                                result.append("\nCluster Assignments:\n");
                                for (int i = 0; i < dataset.size(); i++) {
                                    result.append("Data Point ").append(i + 1).append(": Cluster ");
                                    result.append(kMeans.getLabels().get(i) + 1).append("\n");
                                }

                                resultArea.setText(result.toString());
                            } catch (NumberFormatException ex) {
                                resultArea.setText("Error: Please enter valid numbers for K and iterations.");
                            } catch (IllegalArgumentException ex) {
                                resultArea.setText("Error: " + ex.getMessage());
                            }
                        }
                    });

                    // Exit Button Action
                    exitButton.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            clusterFrame.dispose();
                        }
                    });

                    clusterFrame.setVisible(true);
                });
            }
        });
