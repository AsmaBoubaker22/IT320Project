
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;



public class ChartAdminPanel extends javax.swing.JFrame {

    /**
     * Creates new form ChartAdminPanel
     */
    public ChartAdminPanel() {
        initComponents();
        createScatterPlot(); // Call the scatter plot creation method
        createPieChart();
        generateBarChart();
        generateLineChartWithYearRanges();
        createDonutChart();
        displayPropertyTable();
        createPieChartAge();
    }

    /**
     * Method to create and display the scatter plot on the JPanel.
     */
    private void createScatterPlot() {
        String jdbcURL = "jdbc:mysql://localhost:3306/java_db";
        String username = "root";
        String password = "projetIT2025*"; // Update with your database credentials

        String query = """
            SELECT t.price, COALESCE(h.distance, u.distance, th.distance, d.distance) AS distance
            FROM transactions t
            LEFT JOIN houses h ON t.propertyId = h.propertyId
            LEFT JOIN units u ON t.propertyId = u.propertyId
            LEFT JOIN townhouses th ON t.propertyId = th.propertyId
            LEFT JOIN developmentSite d ON t.propertyId = d.propertyId
            WHERE t.price IS NOT NULL AND 
                  (h.distance IS NOT NULL OR u.distance IS NOT NULL OR th.distance IS NOT NULL OR d.distance IS NOT NULL);
            """;

        XYSeries series = new XYSeries("Price vs Distance");

        try (Connection connection = DriverManager.getConnection(jdbcURL, username, password);
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query)) {

            while (resultSet.next()) {
                double price = resultSet.getDouble("price");
                double distance = resultSet.getDouble("distance");
                series.add(distance, price);
            }

        } catch (SQLException e) {
            System.out.println("Database error: " + e.getMessage());
            return;
        }

        XYSeriesCollection dataset = new XYSeriesCollection(series);

        // Create the scatter plot
        JFreeChart scatterPlot = ChartFactory.createScatterPlot(
                "Scatter Plot: Price vs Distance",
                "Distance (km)",
                "Price ($)",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        // Add the scatter plot to the existing JPanel
        ChartPanel chartPanel = new ChartPanel(scatterPlot);
        chartPanel.setSize(jPanel7.getWidth(), jPanel7.getHeight());
        chartPanel.setVisible(true);
        
        jPanel7.setLayout(new java.awt.BorderLayout());
        jPanel7.add(chartPanel, java.awt.BorderLayout.CENTER);
        jPanel7.validate();
    }
    private void createPieChart() {
        try {
            // Step 1: Connect to the database
            String url = "jdbc:mysql://localhost:3306/java_db";
            String username = "root";
            String password = "projetIT2025*"; // Replace with your database password
            // Step 2: Query the database for rooms data across all tables
            try (Connection conn = DriverManager.getConnection(url, username, password)) {
                // Step 2: Query the database for rooms data across all tables
                String query = """
                                           SELECT rooms, SUM(count) AS total_count
                                           FROM (
                                               SELECT rooms, COUNT(*) AS count FROM houses GROUP BY rooms
                                               UNION ALL
                                               SELECT rooms, COUNT(*) AS count FROM townhouses GROUP BY rooms
                                               UNION ALL
                                               SELECT rooms, COUNT(*) AS count FROM units GROUP BY rooms
                                           ) AS combined
                                           GROUP BY rooms;
                                           """;
                try (Statement stmt = conn.createStatement()) {
                    ResultSet rs = stmt.executeQuery(query);
                    
                    // Step 3: Prepare the dataset
                    DefaultPieDataset dataset = new DefaultPieDataset();
                    while (rs.next()) {
                        int rooms = rs.getInt("rooms");
                        int totalCount = rs.getInt("total_count");
                        dataset.setValue(rooms + " Rooms", totalCount);
                    }
                    
                    // Step 4: Create the pie chart
                    JFreeChart pieChart = ChartFactory.createPieChart(
                            "Rooms Distribution", // Chart title
                            dataset,              // Dataset
                            true,                 // Include legend
                            true,                 // Include tooltips
                            false                 // Exclude URLs
                    );
                    
                    // Step 5: Display the chart in the panel
                    ChartPanel chartPanel = new ChartPanel(pieChart);
                    chartPanel.setPreferredSize(jPanel8.getSize()); // Set the chart size to match the panel
                    jPanel8.removeAll(); // Clear existing content
                    jPanel8.add(chartPanel); // Add the chart to the panel
                    jPanel8.revalidate(); // Refresh the panel
                    jPanel8.repaint(); // Repaint the panel
                    
                    // Step 6: Close the database connection
                    rs.close();
                }
            }

        } catch (SQLException e) {
        }
    }

public void generateBarChart() {
    // Database connection parameters
    String jdbcURL = "jdbc:mysql://localhost:3306/java_db";
    String username = "root";
    String password = "projetIT2025*"; // Update with your database credentials

    // SQL query to fetch data
    String query = """
        SELECT t.method, SUM(t.price) AS total_price
        FROM transactions t
        WHERE t.price IS NOT NULL AND t.method IS NOT NULL
        GROUP BY t.method
        """;

    // Map to store the total price for each method
    Map<String, Double> priceData = new HashMap<>();

    // Execute the SQL query and populate the map
    try (Connection connection = DriverManager.getConnection(jdbcURL, username, password);
         Statement statement = connection.createStatement();
         ResultSet resultSet = statement.executeQuery(query)) {

        while (resultSet.next()) {
            String method = resultSet.getString("method");
            double totalPrice = resultSet.getDouble("total_price");
            priceData.put(method, totalPrice);
        }

    } catch (SQLException e) {
        System.out.println("Database error: " + e.getMessage());
        return;
    }

    // Check if we have any data
    if (priceData.isEmpty()) {
        System.out.println("No data available to generate the chart.");
        return;
    }

    // Create dataset for the bar chart
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

    // Add data to the dataset
    for (Map.Entry<String, Double> entry : priceData.entrySet()) {
        String method = entry.getKey();
        double totalPrice = entry.getValue();
        dataset.addValue(totalPrice, "Price", method);  // "Price" is the Y-axis label
    }

    // Create the bar chart
    JFreeChart barChart = ChartFactory.createBarChart(
            "Price vs Method", // Chart title
            "Method", // X-axis label
            "Total Price ($)", // Y-axis label
            dataset, // Dataset
            PlotOrientation.VERTICAL, // Orientation
            true, // Include legend
            true, // Tooltips
            false // URLs
    );

    // Add the bar chart to the existing JPanel
    ChartPanel chartPanel = new ChartPanel(barChart);
    chartPanel.setSize(jPanel9.getWidth(), jPanel9.getHeight());
    chartPanel.setVisible(true);

    jPanel9.setLayout(new java.awt.BorderLayout());
    jPanel9.add(chartPanel, java.awt.BorderLayout.CENTER);
    jPanel9.validate();
}
public void generateLineChartWithYearRanges() {
    // Database connection parameters
    String jdbcURL = "jdbc:mysql://localhost:3306/java_db";
    String username = "root";
    String password = "projetIT2025*"; // Update with your database credentials

    // SQL query to fetch data from houses, units, and townhouses
    String query = """
        SELECT yearBuilt, COUNT(*) AS propertyCount
        FROM (
            SELECT yearBuilt FROM houses
            UNION ALL
            SELECT yearBuilt FROM units
            UNION ALL
            SELECT yearBuilt FROM townhouses
        ) AS all_properties
        where yearBuilt > 1800 
        GROUP BY yearBuilt
        ORDER BY yearBuilt
        """;

    // Map to store the number of properties for each yearBuilt
    Map<Integer, Integer> propertyCountByYear = new TreeMap<>();

    // Execute the SQL query and populate the map
    try (Connection connection = DriverManager.getConnection(jdbcURL, username, password);
         Statement statement = connection.createStatement();
         ResultSet resultSet = statement.executeQuery(query)) {

        while (resultSet.next()) {
            int yearBuilt = resultSet.getInt("yearBuilt");
            int propertyCount = resultSet.getInt("propertyCount");
            propertyCountByYear.put(yearBuilt, propertyCount);
        }

    } catch (SQLException e) {
        System.out.println("Database error: " + e.getMessage());
        return;
    }

    // Create dataset for the line chart
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

    // Add data to the dataset and group years into 10-year ranges
    Map<String, Integer> groupedData = new TreeMap<>();
    
    for (Map.Entry<Integer, Integer> entry : propertyCountByYear.entrySet()) {
        int yearBuilt = entry.getKey();
        int propertyCount = entry.getValue();

        // Group years into ranges (e.g., 2000-2010, 2011-2020)
        int rangeStart = (yearBuilt / 10) * 10;
        int rangeEnd = rangeStart + 9;
        String range = rangeStart + "-" + rangeEnd;

        // Aggregate data for the range
        groupedData.put(range, groupedData.getOrDefault(range, 0 ) + propertyCount);
    }

    // Add the grouped data to the dataset
    for (Map.Entry<String, Integer> entry : groupedData.entrySet()) {
        String yearRange = entry.getKey();
        int propertyCount = entry.getValue();
        dataset.addValue(propertyCount, "Number of Properties", yearRange);
    }

    // Create the line chart
    JFreeChart lineChart = ChartFactory.createLineChart(
            "Number of Properties vs Year Built", // Chart title
            "Year Built", // X-axis label
            "Number of Properties", // Y-axis label
            dataset, // Dataset
            PlotOrientation.VERTICAL, // Orientation
            true, // Include legend
            true, // Tooltips
            false // URLs
    );

    // Adjust the X-axis to display ranges (e.g., 2000-2010, 2011-2020)
    CategoryPlot plot = lineChart.getCategoryPlot();
    CategoryAxis categoryAxis = plot.getDomainAxis();

    // Add the line chart to the existing JPanel
    ChartPanel chartPanel = new ChartPanel(lineChart);
    chartPanel.setSize(jPanel6.getWidth(), jPanel6.getHeight());
    chartPanel.setVisible(true);

    jPanel6.setLayout(new java.awt.BorderLayout());
    jPanel6.add(chartPanel, java.awt.BorderLayout.CENTER);
    jPanel6.validate();
}
public void displayPropertyTable() {
    String url = "jdbc:mysql://localhost:3306/java_db";
    String username = "root";
    String password = "projetIT2025*";

    // Define column headers (16 columns as per the new structure)
    String[] columns = {
        "Property Type", 
        "Total Rooms", "1 Room", "2 Rooms", "3 Rooms", "4 Rooms", "5 Rooms", // Rooms
        "Total Bathrooms", "1 Bathroom", "2 Bathrooms", "3 Bathrooms", "4 Bathrooms", // Bathrooms
        "Max Building Size", "Min Building Size", // Building Size
        "Max Parking Spot", "Min Parking Spot" // Parking Spots
    };

    DefaultTableModel model = new DefaultTableModel(columns, 0);
    String[] propertyTypes = {"houses", "townhouses", "units"};

    try (Connection conn = DriverManager.getConnection(url, username, password);
         Statement stmt = conn.createStatement()) {

        for (String type : propertyTypes) {
            String query = String.format("""
               SELECT 
                    SUM(CASE WHEN rooms = 1 THEN 1 ELSE 0 END) AS room1,
                    SUM(CASE WHEN rooms = 2 THEN 1 ELSE 0 END) AS room2,
                    SUM(CASE WHEN rooms = 3 THEN 1 ELSE 0 END) AS room3,
                    SUM(CASE WHEN rooms = 4 THEN 1 ELSE 0 END) AS room4,
                    SUM(CASE WHEN rooms = 5 THEN 1 ELSE 0 END) AS room5,
                    SUM(rooms) AS total_rooms,
                    SUM(CASE WHEN bathroom = 1 THEN 1 ELSE 0 END) AS bath1,
                    SUM(CASE WHEN bathroom = 2 THEN 1 ELSE 0 END) AS bath2,
                    SUM(CASE WHEN bathroom = 3 THEN 1 ELSE 0 END) AS bath3,
                    SUM(CASE WHEN bathroom = 4 THEN 1 ELSE 0 END) AS bath4,
                    SUM(bathroom) AS total_bathrooms,
                    MAX(buildingSize) AS max_building_size,
                    MIN(buildingSize) AS min_building_size,
                    MAX(parkingSpot) AS max_parking_spots,
                    MIN(parkingSpot) AS min_parking_spots         
                FROM %s;
            """, type);

            try (ResultSet rs = stmt.executeQuery(query)) {
                if (rs.next()) {
                    model.addRow(new Object[]{
                        type, 
                        rs.getInt("total_rooms"), 
                        rs.getInt("room1"), rs.getInt("room2"), rs.getInt("room3"), rs.getInt("room4"), rs.getInt("room5"),
                        rs.getInt("total_bathrooms"), 
                        rs.getInt("bath1"), rs.getInt("bath2"), rs.getInt("bath3"), rs.getInt("bath4"),
                        rs.getInt("max_building_size"), 
                        rs.getInt("min_building_size"),
                        rs.getInt("max_parking_spots"),
                        rs.getInt("min_parking_spots")
                    });
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }

    JTable table = new JTable(model);
    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

    // Set row height to make the rows bigger
    table.setRowHeight(40);  // Set row height to 40 pixels (you can adjust this value)

    // Set custom table header renderer for multi-level headers
    JTableHeader header = table.getTableHeader();
    header.setDefaultRenderer(new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                       boolean hasFocus, int row, int column) {
            JLabel label = new JLabel(value == null ? "" : value.toString(), SwingConstants.CENTER);
            label.setFont(new Font("Arial", Font.BOLD, 14));
            label.setBorder(BorderFactory.createMatteBorder(1, 1, 2, 1, Color.BLACK));

            // Apply background color for specific labels
            if (column == 1 || column == 7) { // Total Rooms column (index 1) and Total Bathrooms column (index 7)
                label.setBackground(Color.CYAN);  // Set a color for the header of "Total Rooms" and "Total Bathrooms"
                label.setOpaque(true);
            } else {
                label.setBackground(UIManager.getColor("TableHeader.background"));
                label.setOpaque(false);
            }

            return label;
        }
    });

    JScrollPane tableScrollPane = new JScrollPane(table);

    // Display the table in the panel
    jPanel10.removeAll(); // Clear existing content
    jPanel10.setLayout(new java.awt.BorderLayout());
    jPanel10.add(tableScrollPane, java.awt.BorderLayout.CENTER);
    jPanel10.revalidate(); // Refresh the panel
    jPanel10.repaint(); // Repaint the panel
}
private void createDonutChart() {
    try {
        // Step 1: Connect to the database
        String url = "jdbc:mysql://localhost:3306/java_db";
        String username = "root";
        String password = "projetIT2025*"; // Replace with your database password

        // Step 2: Query the database for gender data
        String query = """
            SELECT gender, COUNT(*) AS total_count
            FROM buyers
            GROUP BY gender;
        """;

        try (Connection conn = DriverManager.getConnection(url, username, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            // Step 3: Prepare the dataset
            DefaultPieDataset dataset = new DefaultPieDataset();
            while (rs.next()) {
                String gender = rs.getString("gender");
                int totalCount = rs.getInt("total_count");
                dataset.setValue(gender, totalCount); // Add data to the dataset
            }

            // Step 4: Create the donut chart
            JFreeChart donutChart = ChartFactory.createRingChart(
                    "Buyers Gender Distribution", // Chart title
                    dataset,               // Dataset
                    true,                  // Include legend
                    true,                  // Include tooltips
                    false                  // Exclude URLs
            );

            // Step 5: Display the chart in the panel
            ChartPanel chartPanel = new ChartPanel(donutChart);
            chartPanel.setPreferredSize(jPanel12.getSize()); // Match the panel size
            chartPanel.setMouseWheelEnabled(true); // Enable zoom with mouse wheel
            jPanel12.removeAll(); // Clear existing content
            jPanel12.add(chartPanel); // Add the chart to the panel
            jPanel12.revalidate(); // Refresh the panel
            jPanel12.repaint(); // Repaint the panel
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
}
private void createPieChartAge() {
    try {
        // Step 1: Connect to the database
        String url = "jdbc:mysql://localhost:3306/java_db";
        String username = "root";
        String password = "projetIT2025*"; // Replace with your database password

        // Step 2: Query the database for age range data
        String query = """
            SELECT 
                CASE 
                    WHEN age BETWEEN 18 AND 25 THEN '18-25'
                    WHEN age BETWEEN 26 AND 35 THEN '26-35'
                    WHEN age BETWEEN 36 AND 45 THEN '36-45'
                    WHEN age BETWEEN 46 AND 55 THEN '46-55'
                    ELSE '56+'
                END AS age_group,
                COUNT(*) AS total_count
            FROM buyers
            GROUP BY age_group;
        """;

        try (Connection conn = DriverManager.getConnection(url, username, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            // Step 3: Prepare the dataset
            DefaultPieDataset dataset = new DefaultPieDataset();
            while (rs.next()) {
                String ageGroup = rs.getString("age_group"); // Retrieve the age group
                int totalCount = rs.getInt("total_count");   // Retrieve the count
                dataset.setValue(ageGroup, totalCount);      // Add data to the dataset
            }

            // Step 4: Create the pie chart
            JFreeChart pieChart = ChartFactory.createPieChart(
                    "Age Distribution",   // Chart title
                    dataset,              // Dataset
                    true,                 // Include legend
                    true,                 // Include tooltips
                    false                 // Exclude URLs
            );

            // Step 5: Display the chart in the panel
            ChartPanel chartPanel = new ChartPanel(pieChart);
            chartPanel.setPreferredSize(jPanel13.getSize()); // Match the panel size
            chartPanel.setMouseWheelEnabled(true); // Enable zoom with mouse wheel
            jPanel13.removeAll(); // Clear existing content
            jPanel13.add(chartPanel); // Add the chart to the panel
            jPanel13.revalidate(); // Refresh the panel
            jPanel13.repaint(); // Repaint the panel
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(100, 149, 237));
        jPanel1.setPreferredSize(new java.awt.Dimension(1930, 1023));

        jLabel2.setFont(new java.awt.Font("Segoe UI Light", 0, 25)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 25)); // NOI18N
        jLabel10.setText("System Dashboard ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(555, 555, 555)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(619, Short.MAX_VALUE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(235, 235, 235)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(256, 256, 256))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1650, 60));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.BorderLayout());
        jPanel8.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(183, 183, 183)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(501, 501, 501))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(146, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(204, 204, 204))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1620, 1023));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChartAdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ChartAdminPanel().setVisible(true);
        });
    }


    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    // End of variables declaration                   
}
